// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Styp$ReactTemplate from "./Styp.js";

var counter = /* record */[/* contents */0];

function gen(param) {
  counter[0] = counter[0] + 1 | 0;
  return String(counter[0]);
}

var Key = {
  counter: counter,
  gen: gen
};

var black = "#000000";

var blue = "#0000FF";

var brown = "#795E26";

var green = "#09885A";

var grey = "#979797";

var red = "#D60A0A";

function style(color) {
  return {
          color: color
        };
}

var Color = {
  black: black,
  blue: blue,
  brown: brown,
  green: green,
  grey: grey,
  red: red,
  style: style
};

var component = ReasonReact.reducerComponent("TreeView");

function make(nodeLabel, collapsed, child, param) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var collapsed = param[/* state */1][/* collapsed */0];
              var arrowClassName = "tree-view_arrow" + (
                collapsed ? " tree-view_arrow-collapsed" : ""
              );
              var containerClassName = "tree-view_children" + (
                collapsed ? " tree-view_children-collapsed" : ""
              );
              return React.createElement("div", {
                          className: "tree-view"
                        }, React.createElement("div", {
                              className: "tree-view_item",
                              onClick: (function (param) {
                                  return Curry._1(send, /* Click */0);
                                })
                            }, React.createElement("div", {
                                  className: arrowClassName
                                }), React.createElement("span", undefined, nodeLabel)), React.createElement("div", {
                              className: containerClassName
                            }, collapsed ? null : child));
            }),
          /* initialState */(function (param) {
              return /* record */[/* collapsed */collapsed];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              return /* Update */Block.__(0, [/* record */[/* collapsed */!state[/* collapsed */0]]]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var TreeView = {
  component: component,
  make: make
};

function node(style, x) {
  var tmp = {
    className: "node"
  };
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  return React.createElement("span", tmp, x);
}

function nodeGreen(x) {
  return node(Caml_option.some(style(green)), x);
}

function nodeBrown(x) {
  return node(Caml_option.some(style(brown)), x);
}

function questionMark(p) {
  return React.createElement("span", {
              style: style(red)
            }, " ? " + Styp$ReactTemplate.P.toString(p));
}

var fmtDefault = /* record */[
  /* plus */false,
  /* percent */false,
  /* hideZeroOne */false,
  /* hideP */false
];

var fmtDelta = /* record */[
  /* plus */true,
  /* percent */false,
  /* hideZeroOne */false,
  /* hideP */false
];

function toComponentStyp(styp, ctx, fmt) {
  var typ = toComponentT(styp[/* typ */0], styp[/* p */2], fmt);
  var match = Styp$ReactTemplate.stypIsNull(styp);
  var style$1 = style(match ? red : black);
  var match$1 = styp[/* typ */0];
  var shouldAddDecorator;
  if (typeof match$1 === "number") {
    shouldAddDecorator = true;
  } else {
    switch (match$1.tag | 0) {
      case /* Number */1 :
      case /* String */2 :
      case /* Boolean */3 :
          shouldAddDecorator = true;
          break;
      default:
        shouldAddDecorator = false;
    }
  }
  var match$2 = Styp$ReactTemplate.stypIsNull(styp);
  if (match$2) {
    return React.createElement("div", {
                className: "node",
                style: style$1
              }, "null");
  } else {
    return React.createElement("div", {
                style: style$1
              }, shouldAddDecorator ? addDecorator(typ, styp, true, ctx, fmt) : typ);
  }
}

function addDecorator(x, styp, right, ctx, fmt) {
  var pUnchanged = Caml_obj.caml_equal(ctx, Styp$ReactTemplate.P.zero) && Caml_obj.caml_equal(styp[/* p */2], Styp$ReactTemplate.P.zero);
  var pString;
  if (fmt[/* percent */1] && Caml_obj.caml_notequal(ctx, Styp$ReactTemplate.P.zero)) {
    pString = (Styp$ReactTemplate.P.toFloat(styp[/* p */2]) / Styp$ReactTemplate.P.toFloat(ctx)).toString();
  } else {
    var match = fmt[/* plus */0];
    pString = (
      match ? "+" : ""
    ) + Styp$ReactTemplate.P.toString(styp[/* p */2]);
  }
  var match$1 = fmt[/* hideP */3] || fmt[/* hideZeroOne */2] && (pUnchanged || Caml_obj.caml_equal(styp[/* p */2], Styp$ReactTemplate.P.one));
  var p = match$1 ? null : React.createElement("span", {
          style: style(blue)
        }, pString);
  var match$2 = styp[/* o */1];
  var o = match$2 ? questionMark(match$2[0]) : null;
  if (right) {
    return React.createElement("span", undefined, x, p, o);
  } else {
    return React.createElement("span", undefined, p, o, x);
  }
}

function toComponentT(typ, ctx, fmt) {
  if (typeof typ === "number") {
    return nodeBrown("empty");
  } else {
    switch (typ.tag | 0) {
      case /* Same */0 :
          return ReasonReact.element("same", undefined, make(nodeBrown("same"), true, toComponentT(typ[0], ctx, fmt), /* array */[]));
      case /* Object */4 :
          var doEntry = function (i, param) {
            var styp = param[1];
            var match = Caml_obj.caml_equal(styp[/* p */2], Styp$ReactTemplate.P.zero);
            return React.createElement("span", {
                        key: String(i),
                        style: style(match ? grey : black)
                      }, ReasonReact.element(String(i), undefined, make(addDecorator(node(undefined, param[0]), styp, true, ctx, fmt), false, toComponentStyp(styp, ctx, fmt), /* array */[])));
          };
          return Belt_Array.mapWithIndex(Js_dict.entries(typ[0]), doEntry);
      case /* Array */5 :
          var styp = typ[0];
          if (Styp$ReactTemplate.stypIsEmpty(styp)) {
            return React.createElement("span", undefined, addDecorator(node(undefined, "["), styp, false, ctx, fmt), node(undefined, "]"));
          } else {
            var match = Caml_obj.caml_equal(styp[/* p */2], Styp$ReactTemplate.P.zero);
            return React.createElement("span", {
                        style: style(match ? grey : black)
                      }, ReasonReact.element(undefined, undefined, make(addDecorator(node(undefined, "["), styp, false, ctx, fmt), false, toComponentStyp(styp, ctx, fmt), /* array */[])), node(undefined, "]"));
          }
      case /* Union */6 :
          var doEntry$1 = function (i, styp) {
            return ReasonReact.element(String(i), undefined, make(addDecorator(node(undefined, "u" + String(i + 1 | 0)), styp, true, ctx, fmt), false, toComponentStyp(styp, ctx, fmt), /* array */[]));
          };
          return React.createElement("div", undefined, nodeBrown("union"), Belt_List.toArray(Belt_List.mapWithIndex(typ[0], doEntry$1)));
      case /* Diff */7 :
          var rhs = typ[2];
          var lhs = typ[1];
          var side = function (left) {
            var lbl = left ? "lhs" : "rhs";
            var styp = left ? lhs : rhs;
            var match = Styp$ReactTemplate.stypIsEmpty(styp);
            return ReasonReact.element(lbl, undefined, make(nodeBrown(lbl), false, match ? null : toComponentStyp(styp, ctx, fmtDelta), /* array */[]));
          };
          return React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "column3"
                        }, side(true)), React.createElement("div", {
                          className: "column3"
                        }, ReasonReact.element(undefined, undefined, make(nodeBrown("common"), false, toComponentT(typ[0], ctx, fmt), /* array */[]))), React.createElement("div", {
                          className: "column3"
                        }, side(false)));
      default:
        return nodeGreen(Styp$ReactTemplate.constToString(typ));
    }
  }
}

var component$1 = ReasonReact.statelessComponent("Styp");

function make$1(name, styp, $staropt$star, param) {
  var fmt = $staropt$star !== undefined ? $staropt$star : fmtDefault;
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (param) {
              return ReasonReact.element(undefined, undefined, make(node(undefined, name), true, toComponentStyp(styp, Styp$ReactTemplate.P.zero, fmt), /* array */[]));
            }),
          /* initialState */component$1[/* initialState */10],
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */component$1[/* reducer */12],
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var Styp = {
  component: component$1,
  make: make$1
};

var component$2 = ReasonReact.statelessComponent("Diff");

function make$2(diff, param) {
  return /* record */[
          /* debugName */component$2[/* debugName */0],
          /* reactClassInternal */component$2[/* reactClassInternal */1],
          /* handedOffState */component$2[/* handedOffState */2],
          /* willReceiveProps */component$2[/* willReceiveProps */3],
          /* didMount */component$2[/* didMount */4],
          /* didUpdate */component$2[/* didUpdate */5],
          /* willUnmount */component$2[/* willUnmount */6],
          /* willUpdate */component$2[/* willUpdate */7],
          /* shouldUpdate */component$2[/* shouldUpdate */8],
          /* render */(function (param) {
              return React.createElement("div", undefined, React.createElement("div", {
                              className: "centerText"
                            }, "Inferred Types"), React.createElement("div", {
                              className: "row"
                            }, React.createElement("div", {
                                  className: "column2"
                                }, ReasonReact.element(undefined, undefined, make$1("styp1", diff[/* styp1 */0], undefined, /* array */[]))), React.createElement("div", {
                                  className: "column2"
                                }, ReasonReact.element(undefined, undefined, make$1("styp2", diff[/* styp2 */1], undefined, /* array */[])))), React.createElement("div", {
                              className: "centerText"
                            }, "Common Part"), React.createElement("div", undefined, ReasonReact.element(undefined, undefined, make$1("stypB", diff[/* stypB */4], undefined, /* array */[]))), React.createElement("div", {
                              className: "centerText"
                            }, "Deltas"), React.createElement("div", {
                              className: "row"
                            }, React.createElement("div", {
                                  className: "column2"
                                }, ReasonReact.element(undefined, undefined, make$1("stypA1", diff[/* stypA1 */2], fmtDelta, /* array */[]))), React.createElement("div", {
                                  className: "column2"
                                }, ReasonReact.element(undefined, undefined, make$1("stypA2", diff[/* stypA2 */3], fmtDelta, /* array */[])))));
            }),
          /* initialState */component$2[/* initialState */10],
          /* retainedProps */component$2[/* retainedProps */11],
          /* reducer */component$2[/* reducer */12],
          /* jsElementWrapped */component$2[/* jsElementWrapped */13]
        ];
}

var Diff = {
  component: component$2,
  make: make$2
};

export {
  Key ,
  Color ,
  TreeView ,
  node ,
  nodeGreen ,
  nodeBrown ,
  questionMark ,
  fmtDefault ,
  fmtDelta ,
  toComponentStyp ,
  addDecorator ,
  toComponentT ,
  Styp ,
  Diff ,
  
}
/* component Not a pure module */
