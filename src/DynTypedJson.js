// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Styp$ReactTemplate from "./Styp.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as TypeCheck$ReactTemplate from "./TypeCheck.js";

function empty(param) {
  return /* record */[
          /* json */null,
          /* styp : record */[/* contents */Styp$ReactTemplate.stypEmpty]
        ];
}

function log(x) {
  console.log("json:", x[/* json */0]);
  console.log("styp:", JSON.stringify(Styp$ReactTemplate.stypToJson(x[/* styp */1][0])));
  return /* () */0;
}

function assignJson(x, json) {
  x[/* styp */1][0] = TypeCheck$ReactTemplate.$caret(x[/* styp */1][0], TypeCheck$ReactTemplate.fromJson(undefined, json));
  x[/* json */0] = json;
  return /* () */0;
}

function getFld(x, fld) {
  if (x[/* styp */1][0][/* o */1] !== /* NotOpt */0) {
    console.log("Type error: access field " + (fld + " of object with nullable type"));
    log(x);
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DynTypedJson.re",
            26,
            4
          ]
        ];
  }
  var match = x[/* styp */1][0][/* typ */0];
  var styp1;
  if (typeof match === "number") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DynTypedJson.re",
            47,
            11
          ]
        ];
  } else if (match.tag === /* Object */4) {
    var styp1$1 = match[0][fld];
    var stypP = x[/* styp */1][0][/* p */2];
    var styp1P = styp1$1[/* p */2];
    var match$1 = x[/* styp */1][0][/* o */1];
    var stypOP = match$1 ? match$1[0] : Styp$ReactTemplate.P.zero;
    if (Caml_obj.caml_notequal(stypP, Styp$ReactTemplate.P["^"](styp1P, stypOP))) {
      console.log("Type error: access field " + (fld + " of object with optional type"));
      log(x);
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "DynTypedJson.re",
              44,
              8
            ]
          ];
    }
    styp1 = styp1$1;
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DynTypedJson.re",
            47,
            11
          ]
        ];
  }
  var match$2 = Js_json.decodeObject(x[/* json */0]);
  var json;
  if (match$2 !== undefined) {
    json = Caml_option.valFromOption(match$2)[fld];
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DynTypedJson.re",
            51,
            14
          ]
        ];
  }
  return /* record */[
          /* json */json,
          /* styp : record */[/* contents */styp1]
        ];
}

var $$null$1 = /* record */[
  /* json */null,
  /* styp : record */[/* contents */Styp$ReactTemplate.stypEmpty]
];

function makeNotNullable(x) {
  var styp = x[/* styp */1][0];
  if (styp[/* o */1] !== /* NotOpt */0) {
    var match = styp[/* o */1];
    var stypOP = match ? match[0] : Styp$ReactTemplate.P.zero;
    x[/* styp */1][0] = /* record */[
      /* typ */styp[/* typ */0],
      /* o : NotOpt */0,
      /* p */Styp$ReactTemplate.P["--"](styp[/* p */2], stypOP)
    ];
    return /* () */0;
  } else {
    return 0;
  }
}

function $eq(x, y) {
  var match = Caml_obj.caml_equal(x, $$null$1);
  var match$1 = Caml_obj.caml_equal(y, $$null$1);
  if (match) {
    if (match$1) {
      return true;
    } else {
      makeNotNullable(y);
      return false;
    }
  } else if (match$1) {
    makeNotNullable(x);
    return false;
  } else {
    return Caml_obj.caml_equal(x, y);
  }
}

function $less$great(x, y) {
  return !$eq(x, y);
}

function ref(json) {
  var x = /* record */[
    /* json */null,
    /* styp : record */[/* contents */Styp$ReactTemplate.stypEmpty]
  ];
  assignJson(x, json);
  return x;
}

var $colon$eq = assignJson;

var $at = getFld;

export {
  empty ,
  log ,
  assignJson ,
  getFld ,
  $$null$1 as $$null,
  makeNotNullable ,
  $eq ,
  $less$great ,
  ref ,
  $colon$eq ,
  $at ,
  
}
/* null Not a pure module */
